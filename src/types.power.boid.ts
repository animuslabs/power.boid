// generated by @greymass/abi2core

import {Bytes, Float32, Name, PublicKey, Struct, UInt16, UInt32, UInt64, UInt8} from '@greymass/eosio'

@Struct.type('AccountAuth')
export class AccountAuth extends Struct {
    @Struct.field(PublicKey, {array: true}) keys!: PublicKey[]
    @Struct.field(UInt8) nonce!: UInt8
}

@Struct.type('TokenUnstake')
export class TokenUnstake extends Struct {
    @Struct.field(UInt16) redeemable_after_round!: UInt16
    @Struct.field(UInt32) quantity!: UInt32
}

@Struct.type('AccountStake')
export class AccountStake extends Struct {
    @Struct.field(TokenUnstake, {array: true}) unstaking!: TokenUnstake[]
    @Struct.field(UInt32) self_staked!: UInt32
    @Struct.field(UInt16) received_delegated_stake!: UInt16
}

@Struct.type('AccountBooster')
export class AccountBooster extends Struct {
    @Struct.field(UInt8) pwr_multiplier!: UInt8
    @Struct.field(UInt16) pwr_add_per_round!: UInt16
    @Struct.field(UInt16) expires_round!: UInt16
    @Struct.field(UInt32) aggregate_pwr_remaining!: UInt32
}

@Struct.type('AccountPower')
export class AccountPower extends Struct {
    @Struct.field(UInt16) last_claimed_round!: UInt16
    @Struct.field(UInt16) last_added_round!: UInt16
    @Struct.field(UInt16) rating!: UInt16
    @Struct.field(UInt16, {array: true}) history!: UInt16[]
    @Struct.field(AccountBooster, {array: true}) boosters!: AccountBooster[]
}

@Struct.type('AccountTeam')
export class AccountTeam extends Struct {
    @Struct.field(UInt8) team_id!: UInt8
    @Struct.field(UInt16) last_edit_round!: UInt16
    @Struct.field(UInt8) team_tax_mult!: UInt8
    @Struct.field(UInt32) team_cumulative_contribution!: UInt32
}

@Struct.type('Account')
export class Account extends Struct {
    @Struct.field(Name) boid_id!: Name
    @Struct.field(Name, {array: true}) owners!: Name[]
    @Struct.field(AccountAuth) auth!: AccountAuth
    @Struct.field(Name, {array: true}) sponsors!: Name[]
    @Struct.field(AccountStake) stake!: AccountStake
    @Struct.field(AccountPower) power!: AccountPower
    @Struct.field(AccountTeam) team!: AccountTeam
    @Struct.field(UInt32) balance!: UInt32
    @Struct.field(UInt16) nft_balance!: UInt16
    @Struct.field('bool') recoverable!: boolean
}

@Struct.type('BoincMeta')
export class BoincMeta extends Struct {
    @Struct.field(UInt64) protocol_id!: UInt64
    @Struct.field('string') url!: string
    @Struct.field(UInt64) teamId!: UInt64
    @Struct.field(Bytes) meta!: Bytes
}

@Struct.type('CollateralConfig')
export class CollateralConfig extends Struct {
    @Struct.field(UInt32) oracle_collateral_deposit_increment!: UInt32
    @Struct.field(UInt32) oracle_collateral_minimum!: UInt32
}

@Struct.type('ConfigAccount')
export class ConfigAccount extends Struct {
    @Struct.field(UInt32) invite_price!: UInt32
    @Struct.field(UInt32) premium_purchase_price!: UInt32
    @Struct.field(UInt8) max_premium_prefix!: UInt8
    @Struct.field(UInt8) max_owners!: UInt8
    @Struct.field(UInt8) max_boosters!: UInt8
    @Struct.field(Name, {array: true}) suffix_whitelist!: Name[]
    @Struct.field(UInt32) remove_sponsor_price!: UInt32
    @Struct.field(UInt8) sponsor_max_invite_codes!: UInt8
    @Struct.field(UInt16) invite_code_expire_rounds!: UInt16
}

@Struct.type('ConfigPower')
export class ConfigPower extends Struct {
    @Struct.field(Float32) sponsor_tax_mult!: Float32
    @Struct.field(Float32) powered_stake_mult!: Float32
    @Struct.field(UInt16) claim_maximum_elapsed_rounds!: UInt16
    @Struct.field(UInt16) soft_max_pwr_add!: UInt16
    @Struct.field(UInt8) history_slots_length!: UInt8
}

@Struct.type('ConfigMint')
export class ConfigMint extends Struct {
    @Struct.field(Float32) round_powered_stake_mult!: Float32
    @Struct.field(Float32) round_power_mult!: Float32
}

@Struct.type('ConfigTeam')
export class ConfigTeam extends Struct {
    @Struct.field(UInt16) change_min_rounds!: UInt16
    @Struct.field(UInt16) edit_team_min_rounds!: UInt16
    @Struct.field(UInt16) team_edit_max_pct_change!: UInt16
    @Struct.field(UInt32) buy_team_cost!: UInt32
    @Struct.field(UInt32) owner_stake_required!: UInt32
    @Struct.field(UInt16) owner_future_stake_lock_rounds_required!: UInt16
}

@Struct.type('ConfigStake')
export class ConfigStake extends Struct {
    @Struct.field(UInt8) unstake_rounds!: UInt8
    @Struct.field(UInt8) extra_stake_min_locked_rounds!: UInt8
}

@Struct.type('ConfigTime')
export class ConfigTime extends Struct {
    @Struct.field(UInt32) rounds_start_sec_since_epoch!: UInt32
    @Struct.field(UInt32) round_length_sec!: UInt32
}

@Struct.type('ConfigAuth')
export class ConfigAuth extends Struct {
    @Struct.field(Name, {array: true}) key_actions_whitelist!: Name[]
    @Struct.field(UInt32) key_account_max_stake!: UInt32
    @Struct.field(UInt32) key_account_max_balance!: UInt32
    @Struct.field(UInt8) account_max_keys!: UInt8
    @Struct.field(UInt32) worker_max_bill_per_action!: UInt32
}

@Struct.type('ConfigNft')
export class ConfigNft extends Struct {
    @Struct.field(UInt16) boid_id_maximum_nfts!: UInt16
    @Struct.field(Name, {array: true}) whitelist_collections!: Name[]
}

@Struct.type('Config')
export class Config extends Struct {
    @Struct.field(ConfigAccount) account!: ConfigAccount
    @Struct.field(ConfigPower) power!: ConfigPower
    @Struct.field(ConfigMint) mint!: ConfigMint
    @Struct.field(ConfigTeam) team!: ConfigTeam
    @Struct.field(ConfigStake) stake!: ConfigStake
    @Struct.field(ConfigTime) time!: ConfigTime
    @Struct.field(ConfigAuth) auth!: ConfigAuth
    @Struct.field(ConfigNft) nft!: ConfigNft
    @Struct.field('bool') paused!: boolean
    @Struct.field('bool') allow_deposits!: boolean
    @Struct.field('bool') allow_withdrawals!: boolean
    @Struct.field(Name) recoveryAccount!: Name
}

@Struct.type('ConsensusConfig')
export class ConsensusConfig extends Struct {
    @Struct.field(UInt32) min_weight!: UInt32
    @Struct.field(Float32) min_weight_pct!: Float32
    @Struct.field(Float32) merge_deviation_pct!: Float32
}

@Struct.type('OracleCollateral')
export class OracleCollateral extends Struct {
    @Struct.field(UInt32) locked!: UInt32
    @Struct.field(UInt32) unlocking!: UInt32
    @Struct.field(UInt32) slashed!: UInt32
    @Struct.field(UInt16) unlock_finished_round!: UInt16
    @Struct.field(UInt16) min_unlock_start_round!: UInt16
}

@Struct.type('OracleFunds')
export class OracleFunds extends Struct {
    @Struct.field(UInt32) claimed!: UInt32
    @Struct.field(UInt32) unclaimed!: UInt32
    @Struct.field(UInt32) withdrawing!: UInt32
    @Struct.field(UInt16) withdrawable_after_round!: UInt16
}

@Struct.type('Oracle')
export class Oracle extends Struct {
    @Struct.field(Name) account!: Name
    @Struct.field(UInt8) weight!: UInt8
    @Struct.field(OracleCollateral) collateral!: OracleCollateral
    @Struct.field(OracleFunds) funds!: OracleFunds
    @Struct.field('bool') standby!: boolean
    @Struct.field(UInt16) last_standby_toggle_round!: UInt16
}

@Struct.type('Reports')
export class Reports extends Struct {
    @Struct.field(UInt32) proposed!: UInt32
    @Struct.field(UInt32) reported_or_merged!: UInt32
    @Struct.field(UInt32) unreported_unmerged!: UInt32
}

@Struct.type('OracleStat')
export class OracleStat extends Struct {
    @Struct.field(UInt16) round!: UInt16
    @Struct.field(UInt8) weight!: UInt8
    @Struct.field(Reports) reports!: Reports
    @Struct.field('bool') processed!: boolean
}

@Struct.type('PaymentConfig')
export class PaymentConfig extends Struct {
    @Struct.field(Float32) collateral_pct_pay_per_round_mult!: Float32
    @Struct.field(UInt32) round_bonus_pay_reports!: UInt32
    @Struct.field(UInt32) round_bonus_pay_proposed!: UInt32
    @Struct.field(Float32) reports_proposed_adjust_pwr!: Float32
    @Struct.field(Float32) num_oracles_adjust_base!: Float32
}

@Struct.type('Protocol')
export class Protocol extends Struct {
    @Struct.field(UInt64) protocol_id!: UInt64
    @Struct.field(Name) protocol_name!: Name
    @Struct.field(Float32) unitPowerMult!: Float32
    @Struct.field('bool') active!: boolean
}

@Struct.type('SlashConfig')
export class SlashConfig extends Struct {
    @Struct.field(UInt32) slash_quantity_static!: UInt32
    @Struct.field(Float32) slash_quantity_collateral_pct!: Float32
}

@Struct.type('WaitConfig')
export class WaitConfig extends Struct {
    @Struct.field(UInt16) withdraw_rounds_wait!: UInt16
    @Struct.field(UInt16) collateral_unlock_wait_rounds!: UInt16
}

@Struct.type('PwrConfig')
export class PwrConfig extends Struct {
    @Struct.field('bool') paused!: boolean
    @Struct.field(ConsensusConfig) consensus!: ConsensusConfig
    @Struct.field(PaymentConfig) payment!: PaymentConfig
    @Struct.field(SlashConfig) slashLow!: SlashConfig
    @Struct.field(SlashConfig) slashMed!: SlashConfig
    @Struct.field(SlashConfig) slashHigh!: SlashConfig
    @Struct.field(WaitConfig) waits!: WaitConfig
    @Struct.field(CollateralConfig) collateral!: CollateralConfig
    @Struct.field(UInt32) keep_finalized_stats_rows!: UInt32
    @Struct.field(UInt16) standby_toggle_interval_rounds!: UInt16
    @Struct.field(Float32) reports_accumulate_weight_round_pct!: Float32
}

@Struct.type('PwrGlobal')
export class PwrGlobal extends Struct {
    @Struct.field(UInt16) reporting_round!: UInt16
    @Struct.field(Name, {array: true}) active_oracles!: Name[]
    @Struct.field(Name, {array: true}) expected_active_oracles!: Name[]
    @Struct.field(UInt16) expected_active_weight!: UInt16
    @Struct.field(UInt16) active_weight!: UInt16
}

@Struct.type('PwrReport')
export class PwrReport extends Struct {
    @Struct.field(UInt8) protocol_id!: UInt8
    @Struct.field(UInt16) round!: UInt16
    @Struct.field(UInt32) units!: UInt32
}

@Struct.type('PwrReportRow')
export class PwrReportRow extends Struct {
    @Struct.field(Name) proposer!: Name
    @Struct.field(PwrReport) report!: PwrReport
    @Struct.field(Name, {array: true}) approvals!: Name[]
    @Struct.field(UInt16) approval_weight!: UInt16
}

@Struct.type('RoundCommit')
export class RoundCommit extends Struct {
    @Struct.field(UInt64) round_commit_id!: UInt64
    @Struct.field(UInt8) protocol_id!: UInt8
    @Struct.field(UInt16) round!: UInt16
    @Struct.field(Name) boid_id!: Name
}

@Struct.type('boincclear')
export class Boincclear extends Struct {
}

@Struct.type('boincset')
export class Boincset extends Struct {
    @Struct.field(BoincMeta) boincMeta!: BoincMeta
}

@Struct.type('commitsclean')
export class Commitsclean extends Struct {
    @Struct.field(Name) scope!: Name
    @Struct.field(UInt16) round!: UInt16
}

@Struct.type('commitsclear')
export class Commitsclear extends Struct {
    @Struct.field(Name) scope!: Name
}

@Struct.type('configclear')
export class Configclear extends Struct {
}

@Struct.type('configset')
export class Configset extends Struct {
    @Struct.field(PwrConfig) config!: PwrConfig
}

@Struct.type('finalround')
export class Finalround extends Struct {
}

@Struct.type('finishreport')
export class Finishreport extends Struct {
    @Struct.field(Name) boid_id_scope!: Name
    @Struct.field(UInt64) pwrreport_id!: UInt64
}

@Struct.type('globalclear')
export class Globalclear extends Struct {
}

@Struct.type('globalset')
export class Globalset extends Struct {
    @Struct.field(PwrGlobal) global!: PwrGlobal
}

@Struct.type('mergereports')
export class Mergereports extends Struct {
    @Struct.field(Name) boid_id_scope!: Name
    @Struct.field(UInt64, {array: true}) pwrreport_ids!: UInt64[]
}

@Struct.type('oracldeposit')
export class Oracldeposit extends Struct {
    @Struct.field(Name) oracle!: Name
    @Struct.field(UInt32) depositQuantity!: UInt32
}

@Struct.type('oraclesclear')
export class Oraclesclear extends Struct {
}

@Struct.type('oracleset')
export class Oracleset extends Struct {
    @Struct.field(Name) oracle!: Name
    @Struct.field(UInt8) weight!: UInt8
    @Struct.field(UInt32) adding_collateral!: UInt32
}

@Struct.type('ostatsclean')
export class Ostatsclean extends Struct {
    @Struct.field(Name) scope!: Name
}

@Struct.type('ostatsclear')
export class Ostatsclear extends Struct {
    @Struct.field(Name) scope!: Name
}

@Struct.type('payoracle')
export class Payoracle extends Struct {
    @Struct.field(Name) oracle!: Name
    @Struct.field(UInt32) basePay!: UInt32
    @Struct.field(UInt32) bonusPay!: UInt32
    @Struct.field(UInt16) round!: UInt16
}

@Struct.type('payoutround')
export class Payoutround extends Struct {
    @Struct.field(Name) oracle!: Name
    @Struct.field(UInt16) round!: UInt16
}

@Struct.type('protoclear')
export class Protoclear extends Struct {
}

@Struct.type('protoset')
export class Protoset extends Struct {
    @Struct.field(Protocol) protocol!: Protocol
}

@Struct.type('pwrreport')
export class Pwrreport extends Struct {
    @Struct.field(Name) oracle!: Name
    @Struct.field(Name) boid_id_scope!: Name
    @Struct.field(PwrReport) report!: PwrReport
}

@Struct.type('reportsclean')
export class Reportsclean extends Struct {
    @Struct.field(Name) scope!: Name
}

@Struct.type('reportsclear')
export class Reportsclear extends Struct {
    @Struct.field(Name) scope!: Name
}

@Struct.type('roundcommit')
export class Roundcommit extends Struct {
    @Struct.field(Name) oracle!: Name
    @Struct.field(Name) boid_id!: Name
    @Struct.field(UInt8) protocol_id!: UInt8
    @Struct.field(UInt16) round!: UInt16
}

@Struct.type('setstandby')
export class Setstandby extends Struct {
    @Struct.field(Name) oracle!: Name
    @Struct.field('bool') standby!: boolean
}

@Struct.type('setweight')
export class Setweight extends Struct {
    @Struct.field(Name) oracle!: Name
    @Struct.field(UInt8) weight!: UInt8
}

@Struct.type('slashhigh')
export class Slashhigh extends Struct {
    @Struct.field(Name) oracle!: Name
}

@Struct.type('slashlow')
export class Slashlow extends Struct {
    @Struct.field(Name) oracle!: Name
}

@Struct.type('slashmed')
export class Slashmed extends Struct {
    @Struct.field(Name) oracle!: Name
}

@Struct.type('slashoracle')
export class Slashoracle extends Struct {
    @Struct.field(Name) oracle!: Name
    @Struct.field(UInt32) quantity!: UInt32
}

@Struct.type('thisround')
export class Thisround extends Struct {
}

@Struct.type('unlock')
export class Unlock extends Struct {
    @Struct.field(Name) oracle!: Name
}

@Struct.type('unlockinit')
export class Unlockinit extends Struct {
    @Struct.field(Name) oracle!: Name
}

@Struct.type('withdraw')
export class Withdraw extends Struct {
    @Struct.field(Name) oracle!: Name
}

@Struct.type('withdrawinit')
export class Withdrawinit extends Struct {
    @Struct.field(Name) oracle!: Name
}
