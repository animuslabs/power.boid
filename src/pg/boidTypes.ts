// generated by @greymass/abi2core

import {
  Bytes,
  Float32,
  Int32,
  Name,
  PublicKey,
  Signature,
  Struct,
  TimePoint,
  UInt16,
  UInt32,
  UInt64,
  UInt8
} from "@greymass/eosio"

@Struct.type("AccountAuth")
export class AccountAuth extends Struct {
    @Struct.field(PublicKey, { array: true }) keys!:PublicKey[]
    @Struct.field(UInt32) nonce!:UInt32
}

@Struct.type("TokenUnstake")
export class TokenUnstake extends Struct {
    @Struct.field(UInt16) redeemable_after_round!:UInt16
    @Struct.field(UInt32) quantity!:UInt32
}

@Struct.type("AccountStake")
export class AccountStake extends Struct {
    @Struct.field(TokenUnstake, { array: true }) unstaking!:TokenUnstake[]
    @Struct.field(UInt32) self_staked!:UInt32
    @Struct.field(UInt16) received_delegated_stake!:UInt16
}

@Struct.type("AccountPowerMod")
export class AccountPowerMod extends Struct {
    @Struct.field(UInt8) pwr_multiplier!:UInt8
    @Struct.field(UInt16) pwr_add_per_round!:UInt16
    @Struct.field(UInt16) expires_round!:UInt16
    @Struct.field(UInt32) aggregate_pwr_remaining!:UInt32
}

@Struct.type("AccountPower")
export class AccountPower extends Struct {
    @Struct.field(UInt16) last_claimed_round!:UInt16
    @Struct.field(UInt16) rating!:UInt16
    @Struct.field(AccountPowerMod, { array: true }) mods!:AccountPowerMod[]
}

@Struct.type("AccountTeam")
export class AccountTeam extends Struct {
    @Struct.field(UInt16) team_id!:UInt16
    @Struct.field(UInt16) last_edit_round!:UInt16
    @Struct.field(UInt8) team_tax_pct!:UInt8
    @Struct.field(UInt32) team_cumulative_contribution!:UInt32
}

@Struct.type("Account")
export class Account extends Struct {
    @Struct.field(Name) boid_id!:Name
    @Struct.field(Name, { array: true }) owners!:Name[]
    @Struct.field(AccountAuth) auth!:AccountAuth
    @Struct.field(Name, { array: true }) sponsors!:Name[]
    @Struct.field(AccountStake) stake!:AccountStake
    @Struct.field(AccountPower) power!:AccountPower
    @Struct.field(AccountTeam) team!:AccountTeam
    @Struct.field("string") social_ipfs_json!:string
    @Struct.field(UInt32) balance!:UInt32
}

@Struct.type("PermissionLevel")
export class PermissionLevel extends Struct {
    @Struct.field(Name) actor!:Name
    @Struct.field(Name) permission!:Name
}

@Struct.type("Action")
export class Action extends Struct {
    @Struct.field(PermissionLevel, { array: true }) authorization!:PermissionLevel[]
    @Struct.field(Name) account!:Name
    @Struct.field(Name) name!:Name
    @Struct.field(Bytes) data!:Bytes
}

@Struct.type("ConfigAccount")
export class ConfigAccount extends Struct {
    @Struct.field(UInt32) purchase_price!:UInt32
    @Struct.field(UInt8) max_owners!:UInt8
    @Struct.field(UInt8) max_sponsors!:UInt8
    @Struct.field(UInt8) max_pwrmods!:UInt8
    @Struct.field("string[]") suffix_whitelist!:string[]
    @Struct.field(UInt32) remove_sponsor_price!:UInt32
}

@Struct.type("ConfigPower")
export class ConfigPower extends Struct {
    @Struct.field(UInt16) round_decay_constant!:UInt16
    @Struct.field(UInt16) round_decay_mult!:UInt16
    @Struct.field(UInt16) sponsor_tax_mult!:UInt16
    @Struct.field(UInt16) powered_stake_mult!:UInt16
    @Struct.field(Float32) powered_stake_pwr!:Float32
}

@Struct.type("ConfigMint")
export class ConfigMint extends Struct {
    @Struct.field(Float32) round_powered_stake_mult!:Float32
    @Struct.field(Float32) round_power_mult!:Float32
}

@Struct.type("ConfigTeam")
export class ConfigTeam extends Struct {
    @Struct.field(UInt16) change_min_rounds!:UInt16
    @Struct.field(UInt16) edit_team_min_rounds!:UInt16
    @Struct.field(UInt16) team_edit_max_pct_change!:UInt16
    @Struct.field(UInt32) buy_team_cost!:UInt32
    @Struct.field(UInt32) owner_stake_required!:UInt32
    @Struct.field(UInt16) owner_future_stake_lock_rounds_required!:UInt16
}

@Struct.type("ConfigStake")
export class ConfigStake extends Struct {
    @Struct.field(UInt8) unstake_rounds!:UInt8
    @Struct.field(UInt8) extra_stake_min_locked_rounds!:UInt8
}

@Struct.type("ConfigTime")
export class ConfigTime extends Struct {
    @Struct.field(TimePoint) rounds_start!:TimePoint
    @Struct.field(UInt32) round_length_sec!:UInt32
}

@Struct.type("Config")
export class Config extends Struct {
    @Struct.field(ConfigAccount) account!:ConfigAccount
    @Struct.field(ConfigPower) power!:ConfigPower
    @Struct.field(ConfigMint) mint!:ConfigMint
    @Struct.field(ConfigTeam) team!:ConfigTeam
    @Struct.field(ConfigStake) stake!:ConfigStake
    @Struct.field(ConfigTime) time!:ConfigTime
}

@Struct.type("Deposits")
export class Deposits extends Struct {
    @Struct.field(Name) boid_id!:Name
    @Struct.field(UInt32) boid_quantity!:UInt32
}

@Struct.type("PwrMod")
export class PwrMod extends Struct {
    @Struct.field(UInt8) mod_id!:UInt8
    @Struct.field(UInt8) pwr_multiplier!:UInt8
    @Struct.field(UInt16) pwr_add_per_round!:UInt16
    @Struct.field(UInt16) expire_after_elapsed_rounds!:UInt16
    @Struct.field(UInt32) aggregate_pwr_capacity!:UInt32
}

@Struct.type("Stake")
export class Stake extends Struct {
    @Struct.field(UInt64) stake_id!:UInt64
    @Struct.field(Name) from_boid_id!:Name
    @Struct.field(Name) to_boid_id!:Name
    @Struct.field(UInt16) stake_quantity!:UInt16
    @Struct.field(UInt16) locked_until_round!:UInt16
}

@Struct.type("Team")
export class Team extends Struct {
    @Struct.field(UInt16) team_id!:UInt16
    @Struct.field(UInt32) balance!:UInt32
    @Struct.field(Name) owner!:Name
    @Struct.field(Name, { array: true }) managers!:Name[]
    @Struct.field(UInt8) min_pwr_tax_pct!:UInt8
    @Struct.field(UInt8) owner_cut_pct!:UInt8
    @Struct.field("string") url_safe_name!:string
    @Struct.field("string") info_json_ipfs!:string
    @Struct.field(UInt32) power!:UInt32
    @Struct.field(UInt32) members!:UInt32
    @Struct.field(UInt16) last_edit_round!:UInt16
}

@Struct.type("account.add")
export class AccountAdd extends Struct {
    @Struct.field(Name) boid_id!:Name
    @Struct.field(Name, { array: true }) owners!:Name[]
    @Struct.field(Name, { array: true }) sponsors!:Name[]
    @Struct.field(PublicKey, { array: true }) keys!:PublicKey[]
}

@Struct.type("account.buy")
export class AccountBuy extends Struct {
    @Struct.field(Name) boid_id!:Name
    @Struct.field(Name, { array: true }) owners!:Name[]
    @Struct.field(Name) sponsor!:Name
}

@Struct.type("account.edit")
export class AccountEdit extends Struct {
    @Struct.field(Name) boid_id!:Name
    @Struct.field("string") social_ipfs_json!:string
}

@Struct.type("account.free")
export class AccountFree extends Struct {
    @Struct.field(Name) boid_id!:Name
}

@Struct.type("auth")
export class Auth extends Struct {
    @Struct.field(Name) boid_id!:Name
    @Struct.field(Action, { array: true }) actions!:Action[]
    @Struct.field(Signature) sig!:Signature
    @Struct.field(Int32) keyIndex!:Int32
}

@Struct.type("auth.addkey")
export class AuthAddkey extends Struct {
    @Struct.field(Name) boid_id!:Name
    @Struct.field(PublicKey) key!:PublicKey
}

@Struct.type("config.clear")
export class ConfigClear extends Struct {
}

@Struct.type("config.set")
export class ConfigSet extends Struct {
    @Struct.field(Config) config!:Config
}

@Struct.type("owner.add")
export class OwnerAdd extends Struct {
    @Struct.field(Name) boid_id!:Name
    @Struct.field(Name) owner!:Name
}

@Struct.type("owner.rm")
export class OwnerRm extends Struct {
    @Struct.field(Name) boid_id!:Name
    @Struct.field(Name) owner!:Name
}

@Struct.type("power.add")
export class PowerAdd extends Struct {
    @Struct.field(Name) boid_id!:Name
    @Struct.field(UInt16) power!:UInt16
}

@Struct.type("power.claim")
export class PowerClaim extends Struct {
    @Struct.field(Name) boid_id!:Name
}

@Struct.type("pwrmod.add")
export class PwrmodAdd extends Struct {
    @Struct.field(Name) boid_id!:Name
    @Struct.field(UInt8) mod_id!:UInt8
}

@Struct.type("pwrmod.new")
export class PwrmodNew extends Struct {
    @Struct.field(PwrMod) mod!:PwrMod
}

@Struct.type("pwrmod.rm")
export class PwrmodRm extends Struct {
    @Struct.field(Name) boid_id!:Name
    @Struct.field(UInt8) pwrmod_index!:UInt8
}

@Struct.type("stake")
export class StakeAction extends Struct {
    @Struct.field(Name) boid_id!:Name
    @Struct.field(UInt32) quantity!:UInt32
}

@Struct.type("stake.xtra")
export class StakeXtra extends Struct {
    @Struct.field(Name) from_boid_id!:Name
    @Struct.field(Name) to_boid_id!:Name
    @Struct.field(UInt16) stake_quantity!:UInt16
    @Struct.field(UInt16) lock_until_round!:UInt16
}

@Struct.type("team.change")
export class TeamChange extends Struct {
    @Struct.field(Name) boid_id!:Name
    @Struct.field(UInt8) new_team_id!:UInt8
    @Struct.field(UInt8) new_pwr_tax_pct!:UInt8
}

@Struct.type("team.create")
export class TeamCreate extends Struct {
    @Struct.field(Name) owner!:Name
    @Struct.field(UInt8) min_pwr_tax_pct!:UInt8
    @Struct.field(UInt8) owner_cut_pct!:UInt8
    @Struct.field("string") url_safe_name!:string
    @Struct.field("string") info_json_ipfs!:string
}

@Struct.type("team.edit")
export class TeamEdit extends Struct {
    @Struct.field(UInt8) team_id!:UInt8
    @Struct.field(Name) owner!:Name
    @Struct.field(Name, { array: true }) managers!:Name[]
    @Struct.field(UInt8) min_pwr_tax_pct!:UInt8
    @Struct.field(UInt8) owner_cut_pct!:UInt8
    @Struct.field("string") url_safe_name!:string
    @Struct.field("string") info_json_ipfs!:string
}

@Struct.type("thisround")
export class Thisround extends Struct {
}

@Struct.type("unstake.end")
export class UnstakeEnd extends Struct {
    @Struct.field(Name) boid_id!:Name
}

@Struct.type("unstake.init")
export class UnstakeInit extends Struct {
    @Struct.field(Name) boid_id!:Name
    @Struct.field(UInt32) quantity!:UInt32
}

@Struct.type("unstake.xtra")
export class UnstakeXtra extends Struct {
    @Struct.field(UInt64) stake_id!:UInt64
}

@Struct.type("withdraw")
export class Withdraw extends Struct {
    @Struct.field(Name) boid_id!:Name
    @Struct.field(UInt32) quantity!:UInt32
    @Struct.field(Name) to!:Name
}
